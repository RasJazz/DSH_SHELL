#include "xsh_shell.h"
#include <iostream>
#include <sstream>
#include <vector>
#include <unistd.h>
#include <sys/wait.h>

void startProcess(const std::string& userInput) {
    std::vector<std::string> commands;
    std::istringstream stream(userInput);
    std::string command;

    // Split input at pipes
    while (std::getline(stream, command, '|')) {
        commands.push_back(command);
    }

    int numCommands = commands.size();
    int pipefds[2 * (numCommands - 1)];
    
    // Create pipes
    for (int i = 0; i < (numCommands - 1); ++i) {
        if (pipe(pipefds + i * 2) < 0) {
            perror("pipe");
            exit(EXIT_FAILURE);
        }
    }

    int pid;
    int j = 0;

    for (int i = 0; i < numCommands; ++i) {
        pid = fork();
        
        if (pid == 0) {
            // Redirect input from previous command
            if (i != 0) {
                if (dup2(pipefds[j - 2], 0) < 0) {
                    perror("dup2");
                    exit(EXIT_FAILURE);
                }
            }
            // Redirect output to next command
            if (i != numCommands - 1) {
                if (dup2(pipefds[j + 1], 1) < 0) {
                    perror("dup2");
                    exit(EXIT_FAILURE);
                }
            }

            // Close all pipe file descriptors
            for (int k = 0; k < 2 * (numCommands - 1); ++k) {
                close(pipefds[k]);
            }

            // Split the command into arguments
            std::istringstream cmdStream(commands[i]);
            std::vector<std::string> args;
            std::string arg;
            while (cmdStream >> arg) {
                args.push_back(arg);
            }

            // Convert arguments to char* array
            std::vector<char*> argv(args.size() + 1);
            for (size_t k = 0; k < args.size(); ++k) {
                argv[k] = &args[k][0];
            }

            if (execvp(argv[0], argv.data()) < 0) {
                perror("execvp");
                exit(EXIT_FAILURE);
            }
        } else if (pid < 0) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        j += 2;
    }

    // Close all pipe file descriptors in the parent process
    for (int i = 0; i < 2 * (numCommands - 1); ++i) {
        close(pipefds[i]);
    }

    // Wait for all child processes to finish
    for (int i = 0; i < numCommands; ++i) {
        wait(NULL);
    }
}

void executeFile(const std::string& userInput) {
    std::istringstream cmdStream(userInput);
    std::vector<std::string> args;
    std::string arg;

    while (cmdStream >> arg) {
        args.push_back(arg);
    }

    // Check that there is not more than one argument
    if (args.size() != 1) {
        std::cerr << "Error: Invalid number of arguments." << std::endl;
        return;
    }

    // Convert arguments to char* array
    std::vector<char*> argv(args.size() + 1);
    for (size_t i = 0; i < args.size(); ++i) {
        argv[i] = &args[i][0];
    }

    pid_t pid = fork();
    if (pid == 0) {
        // Child process
        if (execvp(argv[0], argv.data()) < 0) {
            perror("execvp");
            exit(EXIT_FAILURE);
        }
    } else if (pid > 0) {
        // Parent process
        wait(NULL);
    } else {
        perror("fork");
        exit(EXIT_FAILURE);
    }
}